{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Authentication Data with 1000 observations & 21 attributes.\n",
      "    age  amount  duration  checking  history purpose  savings  employed  \\\n",
      "0   67    1169         6         1        4       3        5         5   \n",
      "1   22    5951        48         2        2       3        1         3   \n",
      "2   49    2096        12         4        4       6        1         4   \n",
      "3   45    7882        42         1        2       2        1         4   \n",
      "4   53    4870        24         1        3       0        1         3   \n",
      "\n",
      "   installp  marital    ...     resident  property  other  housing  existcr  \\\n",
      "0         4        3    ...            4         1      3        2        2   \n",
      "1         2        2    ...            2         1      3        2        1   \n",
      "2         2        3    ...            3         1      3        2        1   \n",
      "3         2        3    ...            4         2      3        3        1   \n",
      "4         3        3    ...            4         4      3        3        2   \n",
      "\n",
      "   job  depends  telephon  foreign  good_bad  \n",
      "0    3        1         2        1      good  \n",
      "1    3        1         1        1       bad  \n",
      "2    2        2         1        1      good  \n",
      "3    3        2         1        1      good  \n",
      "4    3        2         1        1       bad  \n",
      "\n",
      "[5 rows x 21 columns]\n",
      "\n",
      "\n",
      "Table of metrics for 10 Folds CV of model with MAX_TREE_DEPTH = 1\n",
      "\n",
      "           Precision  Recall/TPR  F1_Score  Accuracy\n",
      "1st Fold    0.690141         1.0  0.816667  0.690141\n",
      "2nd Fold    0.690141         1.0  0.816667  0.690141\n",
      "3rd Fold    0.690141         1.0  0.816667  0.690141\n",
      "4th Fold    0.685714         1.0  0.813559  0.685714\n",
      "5th Fold    0.685714         1.0  0.813559  0.685714\n",
      "6th Fold    0.685714         1.0  0.813559  0.685714\n",
      "7th Fold    0.685714         1.0  0.813559  0.685714\n",
      "8th Fold    0.695652         1.0  0.820513  0.695652\n",
      "9th Fold    0.695652         1.0  0.820513  0.695652\n",
      "10th Fold   0.695652         1.0  0.820513  0.695652\n",
      "\n",
      "Avg_Precision = 0.6900236199807541\n",
      "Avg_Recall = 1.0\n",
      "Avg_F1 = 0.8165775749674055\n",
      "Avg_Accuracy = 0.6900236199807541\n",
      "\n",
      "\n",
      "Table of metrics for 10 Folds CV of model with MAX_TREE_DEPTH = 2\n",
      "\n",
      "           Precision  Recall/TPR  F1_Score  Accuracy\n",
      "1st Fold    0.681159    0.959184  0.796610  0.661972\n",
      "2nd Fold    0.703125    0.918367  0.796460  0.676056\n",
      "3rd Fold    0.690141    1.000000  0.816667  0.690141\n",
      "4th Fold    0.724138    0.875000  0.792453  0.685714\n",
      "5th Fold    0.730159    0.958333  0.828829  0.728571\n",
      "6th Fold    0.685714    1.000000  0.813559  0.685714\n",
      "7th Fold    0.681818    0.937500  0.789474  0.657143\n",
      "8th Fold    0.813953    0.729167  0.769231  0.695652\n",
      "9th Fold    0.718750    0.958333  0.821429  0.710145\n",
      "10th Fold   0.795455    0.729167  0.760870  0.681159\n",
      "\n",
      "Avg_Precision = 0.7224412427912595\n",
      "Avg_Recall = 0.9065051020408162\n",
      "Avg_F1 = 0.7985580584288008\n",
      "Avg_Accuracy = 0.6872268392966496\n",
      "\n",
      "\n",
      "Table of metrics for 10 Folds CV of model with MAX_TREE_DEPTH = 3\n",
      "\n",
      "           Precision  Recall/TPR  F1_Score  Accuracy\n",
      "1st Fold    0.676471    0.938776  0.786325  0.647887\n",
      "2nd Fold    0.682540    0.877551  0.767857  0.633803\n",
      "3rd Fold    0.691176    0.959184  0.803419  0.676056\n",
      "4th Fold    0.724138    0.875000  0.792453  0.685714\n",
      "5th Fold    0.725806    0.937500  0.818182  0.714286\n",
      "6th Fold    0.686567    0.958333  0.800000  0.671429\n",
      "7th Fold    0.681818    0.937500  0.789474  0.657143\n",
      "8th Fold    0.736842    0.875000  0.800000  0.695652\n",
      "9th Fold    0.730159    0.958333  0.828829  0.724638\n",
      "10th Fold   0.770833    0.770833  0.770833  0.681159\n",
      "\n",
      "Avg_Precision = 0.7106350638763105\n",
      "Avg_Recall = 0.9088010204081632\n",
      "Avg_F1 = 0.7957371227343919\n",
      "Avg_Accuracy = 0.6787767182806987\n",
      "\n",
      "\n",
      "Table of metrics for 10 Folds CV of model with MAX_TREE_DEPTH = 4\n",
      "\n",
      "           Precision  Recall/TPR  F1_Score  Accuracy\n",
      "1st Fold    0.727273    0.816327  0.769231  0.661972\n",
      "2nd Fold    0.716667    0.877551  0.788991  0.676056\n",
      "3rd Fold    0.720000    0.734694  0.727273  0.619718\n",
      "4th Fold    0.724138    0.875000  0.792453  0.685714\n",
      "5th Fold    0.709677    0.916667  0.800000  0.685714\n",
      "6th Fold    0.775862    0.937500  0.849057  0.771429\n",
      "7th Fold    0.704918    0.895833  0.788991  0.671429\n",
      "8th Fold    0.735849    0.812500  0.772277  0.666667\n",
      "9th Fold    0.734375    0.979167  0.839286  0.739130\n",
      "10th Fold   0.770833    0.770833  0.770833  0.681159\n",
      "\n",
      "Avg_Precision = 0.7319592236018224\n",
      "Avg_Recall = 0.8616071428571429\n",
      "Avg_F1 = 0.7898390857183727\n",
      "Avg_Accuracy = 0.6858988714898084\n",
      "\n",
      "\n",
      "Table of metrics for 10 Folds CV of model with MAX_TREE_DEPTH = 5\n",
      "\n",
      "           Precision  Recall/TPR  F1_Score  Accuracy\n",
      "1st Fold    0.678571    0.775510  0.723810  0.591549\n",
      "2nd Fold    0.745763    0.897959  0.814815  0.718310\n",
      "3rd Fold    0.733333    0.897959  0.807339  0.704225\n",
      "4th Fold    0.745098    0.791667  0.767677  0.671429\n",
      "5th Fold    0.750000    0.750000  0.750000  0.657143\n",
      "6th Fold    0.812500    0.812500  0.812500  0.742857\n",
      "7th Fold    0.681818    0.937500  0.789474  0.657143\n",
      "8th Fold    0.740741    0.833333  0.784314  0.681159\n",
      "9th Fold    0.758065    0.979167  0.854545  0.768116\n",
      "10th Fold   0.808511    0.791667  0.800000  0.724638\n",
      "\n",
      "Avg_Precision = 0.7454399589970682\n",
      "Avg_Recall = 0.8467261904761905\n",
      "Avg_F1 = 0.7904473420088568\n",
      "Avg_Accuracy = 0.6916568979091944\n",
      "\n",
      "\n",
      "Table of metrics for 10 Folds CV of model with MAX_TREE_DEPTH = 6\n",
      "\n",
      "           Precision  Recall/TPR  F1_Score  Accuracy\n",
      "1st Fold    0.684211    0.795918  0.735849  0.605634\n",
      "2nd Fold    0.733333    0.897959  0.807339  0.704225\n",
      "3rd Fold    0.769231    0.816327  0.815534  0.732394\n",
      "4th Fold    0.727273    0.833333  0.776699  0.671429\n",
      "5th Fold    0.759259    0.854167  0.803922  0.714286\n",
      "6th Fold    0.811321    0.895833  0.851485  0.785714\n",
      "7th Fold    0.804348    0.770833  0.787234  0.714286\n",
      "8th Fold    0.763636    0.875000  0.815534  0.724638\n",
      "9th Fold    0.770492    0.979167  0.862385  0.782609\n",
      "10th Fold   0.760000    0.791667  0.775510  0.681159\n",
      "\n",
      "Avg_Precision = 0.758310336313087\n",
      "Avg_Recall = 0.8510204081632653\n",
      "Avg_F1 = 0.8031491781314364\n",
      "Avg_Accuracy = 0.7116373603942495\n",
      "\n",
      "\n",
      "Table of metrics for 10 Folds CV of model with MAX_TREE_DEPTH = 7\n",
      "\n",
      "           Precision  Recall/TPR  F1_Score  Accuracy\n",
      "1st Fold    0.735849    0.795918  0.764706  0.661972\n",
      "2nd Fold    0.733333    0.897959  0.807339  0.704225\n",
      "3rd Fold    0.756098    0.632653  0.717391  0.633803\n",
      "4th Fold    0.722222    0.812500  0.764706  0.657143\n",
      "5th Fold    0.745098    0.791667  0.767677  0.671429\n",
      "6th Fold    0.812500    0.812500  0.812500  0.742857\n",
      "7th Fold    0.754386    0.895833  0.819048  0.728571\n",
      "8th Fold    0.763636    0.875000  0.815534  0.724638\n",
      "9th Fold    0.789474    0.937500  0.857143  0.782609\n",
      "10th Fold   0.773585    0.854167  0.811881  0.724638\n",
      "\n",
      "Avg_Precision = 0.7586181130770173\n",
      "Avg_Recall = 0.8305697278911565\n",
      "Avg_F1 = 0.7937924931163571\n",
      "Avg_Accuracy = 0.7031884057971014\n",
      "\n",
      "\n",
      "Table of metrics for 10 Folds CV of model with MAX_TREE_DEPTH = 8\n",
      "\n",
      "           Precision  Recall/TPR  F1_Score  Accuracy\n",
      "1st Fold    0.745098    0.795918  0.760000  0.647887\n",
      "2nd Fold    0.745763    0.897959  0.814815  0.718310\n",
      "3rd Fold    0.764706    0.795918  0.803922  0.732394\n",
      "4th Fold    0.787234    0.770833  0.765957  0.700000\n",
      "5th Fold    0.740741    0.833333  0.784314  0.685714\n",
      "6th Fold    0.785714    0.916667  0.846154  0.771429\n",
      "7th Fold    0.795918    0.812500  0.804124  0.728571\n",
      "8th Fold    0.763636    0.875000  0.815534  0.724638\n",
      "9th Fold    0.775862    0.937500  0.819048  0.768116\n",
      "10th Fold   0.763636    0.895833  0.815534  0.724638\n",
      "\n",
      "Avg_Precision = 0.7668308866026435\n",
      "Avg_Recall = 0.8531462585034013\n",
      "Avg_F1 = 0.8029400693447691\n",
      "Avg_Accuracy = 0.7201697139357885\n",
      "\n",
      "\n",
      "Table of metrics for 10 Folds CV of model with MAX_TREE_DEPTH = 9\n",
      "\n",
      "           Precision  Recall/TPR  F1_Score  Accuracy\n",
      "1st Fold    0.740000    0.755102  0.740000  0.633803\n",
      "2nd Fold    0.736842    0.857143  0.792453  0.690141\n",
      "3rd Fold    0.725000    0.612245  0.620690  0.535211\n",
      "4th Fold    0.760000    0.770833  0.770833  0.685714\n",
      "5th Fold    0.735849    0.812500  0.772277  0.671429\n",
      "6th Fold    0.811321    0.895833  0.851485  0.785714\n",
      "7th Fold    0.788462    0.833333  0.795918  0.714286\n",
      "8th Fold    0.767857    0.895833  0.803922  0.739130\n",
      "9th Fold    0.781818    0.895833  0.834951  0.753623\n",
      "10th Fold   0.777778    0.895833  0.834951  0.739130\n",
      "\n",
      "Avg_Precision = 0.7624926557498555\n",
      "Avg_Recall = 0.8224489795918366\n",
      "Avg_F1 = 0.7817481043527799\n",
      "Avg_Accuracy = 0.6948181844691336\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "Table of metrics for 10 Folds CV of model with MAX_TREE_DEPTH = 10\n",
      "\n",
      "           Precision  Recall/TPR  F1_Score  Accuracy\n",
      "1st Fold    0.770833    0.755102  0.767677  0.676056\n",
      "2nd Fold    0.736842    0.857143  0.792453  0.690141\n",
      "3rd Fold    0.750000    0.673469  0.715789  0.647887\n",
      "4th Fold    0.760000    0.812500  0.775510  0.685714\n",
      "5th Fold    0.735849    0.812500  0.772277  0.671429\n",
      "6th Fold    0.807692    0.875000  0.840000  0.771429\n",
      "7th Fold    0.791667    0.812500  0.804124  0.728571\n",
      "8th Fold    0.773585    0.854167  0.811881  0.724638\n",
      "9th Fold    0.781818    0.895833  0.846154  0.753623\n",
      "10th Fold   0.750000    0.791667  0.780000  0.652174\n",
      "\n",
      "Avg_Precision = 0.7658286557037799\n",
      "Avg_Recall = 0.8139880952380952\n",
      "Avg_F1 = 0.7905865248966926\n",
      "Avg_Accuracy = 0.7001662146793806\n",
      "\n",
      "Displaying Feature Importance for the best Model:\n",
      "\n",
      "     Feature  Importance\n",
      "0        age    0.166505\n",
      "1     amount    0.158877\n",
      "2   duration    0.115608\n",
      "3    depends    0.003254\n",
      "4    foreign    0.000000\n",
      "5    purpose    0.085525\n",
      "6   telephon    0.001849\n",
      "7   checking    0.218845\n",
      "8      coapp    0.000000\n",
      "9   employed    0.051334\n",
      "10   existcr    0.006440\n",
      "11   history    0.024565\n",
      "12   housing    0.000000\n",
      "13  installp    0.038435\n",
      "14       job    0.004850\n",
      "15   marital    0.012571\n",
      "16     other    0.037264\n",
      "17  property    0.041302\n",
      "18  resident    0.007126\n",
      "19   savings    0.025647\n",
      "\n",
      "\n",
      "A table of metrics calculated for best model\n",
      "\n",
      "             Precision  Recall/TPR  F1_Score  Accuracy\n",
      "Max_depth_8   0.796296    0.792627  0.794457  0.703333\n"
     ]
    }
   ],
   "source": [
    "from Class_tree import DecisionTree\n",
    "from Class_replace_impute_encode import ReplaceImputeEncode\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.tree import export_graphviz\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score\n",
    "from sklearn.metrics import f1_score, confusion_matrix, classification_report \n",
    "from pydotplus import graph_from_dot_data\n",
    "import graphviz\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "file_path = '/Users/Pawan/Desktop/MS Folder/4th Sem/STAT 656/Week 5/'\n",
    "df = pd.read_excel(file_path+\"CreditHistory_Clean.xlsx\")\n",
    "print(\"Authentication Data with %i observations & %i attributes.\\n\" %df.shape, df.head())\n",
    "\n",
    "# Replace str values of atrribute 'purpose' with float values\n",
    "list_1 = [0,1,2,3,4,5,6,7,8,9,10]\n",
    "df['purpose'].replace(['0','1','2','3','4','5','6','7','8','9','X'],list_1, inplace = True)\n",
    "\n",
    "\n",
    "attribute_map = {\n",
    "    'age':[0,(1, 120),[0,0]],\n",
    "    'amount':[0,(0, 100000),[0,0]],\n",
    "    'duration':[0,(1,1000),[0,0]],\n",
    "    'checking':[2,(1, 2, 3, 4),[0,0]],\n",
    "    'coapp':[2,(1,2,3),[0,0]],\n",
    "    'depends':[1,(1,2),[0,0]],\n",
    "    'employed':[2,(1,2,3,4,5),[0,0]],\n",
    "    'existcr':[2,(1,2,3,4),[0,0]],\n",
    "    'foreign':[1,(1,2),[0,0]],\n",
    "    'good_bad':[1,('bad', 'good'),[0,0]],\n",
    "    'history':[2,(0,1,2,3,4),[0,0]],\n",
    "    'housing':[2,(1,2,3,),[0,0]],\n",
    "    'installp':[2,(1,2,3,4),[0,0]],\n",
    "    'job':[2,(1,2,3,4),[0,0]],\n",
    "    'marital':[2,(1,2,3,4),[0,0]],\n",
    "    'other':[2,(1,2,3),[0,0]],\n",
    "    'property':[2,(1,2,3,4),[0,0]],\n",
    "    'purpose':[1,(0,1,2,3,4,5,6,7,8,9,10),[0,0]],\n",
    "    'resident':[2,(1,2,3,4),[0,0]],\n",
    "    'savings':[2,(1,2,3,4,5),[0,0]],\n",
    "    'telephon':[1,(1,2),[0,0]] }\n",
    "\n",
    "\n",
    "\n",
    "encoding = None # Categorical encoding:  Use 'SAS', 'one-hot' or None\n",
    "scale    = None  # Interval scaling:  Use 'std', 'robust' or None\n",
    "scaling  = 'No'  # Text description for interval scaling\n",
    "\n",
    "rie = ReplaceImputeEncode(data_map=attribute_map, nominal_encoding=encoding,\n",
    "                          interval_scale = scale, display=False)\n",
    "\n",
    "#features_map = rie.draft_features_map(df)\n",
    "encoded_df = rie.fit_transform(df)\n",
    "\n",
    "\n",
    "# First Integer Designates Data Type\n",
    "# 0=Interval, 1=Binary, 2=Nominal, 3=Other (No Changes, do not include)\n",
    "#good_bad is the name of the binary target\n",
    "varlist = ['good_bad']\n",
    "X = encoded_df.drop(varlist, axis=1)\n",
    "y = encoded_df[varlist]\n",
    "\n",
    "\n",
    "X_train, X_validate, y_train, y_validate = train_test_split(X,y,test_size = 0.3, random_state=7)\n",
    "\n",
    "# 10 fold CV for trees with different 'max_depth' varying from 1 to 10\n",
    "\n",
    "for m in range(0,10):\n",
    "\n",
    "    dtc = DecisionTreeClassifier(criterion='gini', max_depth = m+1,min_samples_split=5, min_samples_leaf=5)\n",
    "    dtc = dtc.fit(X_train,y_train)\n",
    "\n",
    "    features = X_train.columns.values.tolist()\n",
    "    classes = ['Good', 'Bad']\n",
    "\n",
    "    FI = list();\n",
    "    for i in range(0,20):\n",
    "        FI.append(dtc.feature_importances_[i])\n",
    "    len(FI)\n",
    "    FI_df = pd.DataFrame({'Feature':features,'Importance':FI})\n",
    "    predictions = dtc.predict(X_validate)\n",
    "    dtc_10_f1 = cross_val_score(dtc, X_train, y_train, cv=10,scoring='f1')\n",
    "    dtc_10_accuracy = cross_val_score(dtc, X_train, y_train, cv=10,scoring='accuracy')\n",
    "    dtc_10_precision = cross_val_score(dtc, X_train, y_train, cv=10,scoring='precision')\n",
    "    dtc_10_recall = cross_val_score(dtc, X_train, y_train, cv=10,scoring='recall')\n",
    "\n",
    "\n",
    "    dot_data = export_graphviz(dtc, filled=True, rounded=True,class_names=classes, feature_names = features, out_file=None)\n",
    "    #write tree to png file 'credit_history_tree'\n",
    "    graph_png = graph_from_dot_data(dot_data)\n",
    "    graph_path = '/Users/Pawan/Desktop/MS Folder 😇😇✈️/4th Sem/STAT 656/Week 5/'\n",
    "    graph_png.write_png(graph_path+'credit_history_tree_'+str(m+1)+'.png')\n",
    "    \n",
    "    #Display tree in pdf file 'credit_history_tree.pdf'\n",
    "    #graph_pdf = graphviz.Source(dot_data)\n",
    "    #graph_pdf.view('credit_history_tree') #Displays tree\n",
    "    Matrix = np.empty([10,4])\n",
    "    for n in range(0,10):\n",
    "        Matrix[n,0] = dtc_10_precision[n]\n",
    "        Matrix[n,1] = dtc_10_recall[n]\n",
    "        Matrix[n,2] = dtc_10_f1[n]\n",
    "        Matrix[n,3] = dtc_10_accuracy[n]\n",
    "\n",
    "\n",
    "    \n",
    "    Index = ['1st Fold','2nd Fold','3rd Fold','4th Fold','5th Fold','6th Fold','7th Fold','8th Fold','9th Fold','10th Fold'];\n",
    "    Columns = ['Precision', 'Recall/TPR', 'F1_Score', 'Accuracy']\n",
    "    Matrix = pd.DataFrame(Matrix, index = Index, columns = Columns)\n",
    "    print('\\n\\nTable of metrics for 10 Folds CV of model with MAX_TREE_DEPTH = '+str(m+1)+'\\n')\n",
    "    print(Matrix)\n",
    "    print('\\nAvg_Precision = '+ str(Matrix['Precision'].mean()))\n",
    "    print('Avg_Recall = '+ str(Matrix['Recall/TPR'].mean()))\n",
    "    print('Avg_F1 = '+ str(Matrix['F1_Score'].mean()))\n",
    "    print('Avg_Accuracy = '+ str(Matrix['Accuracy'].mean()))\n",
    "\n",
    "\n",
    "# Best model based on 10-fold CV results\n",
    "\n",
    "dtc = DecisionTreeClassifier(criterion='gini', max_depth = 8,min_samples_split=5, min_samples_leaf=5)\n",
    "dtc = dtc.fit(X_train,y_train)\n",
    "\n",
    "features = X_train.columns.values.tolist()\n",
    "classes = ['Good', 'Bad']\n",
    "\n",
    "FI = list();\n",
    "for i in range(0,20):\n",
    "    FI.append(dtc.feature_importances_[i])\n",
    "len(FI)\n",
    "FI_df = pd.DataFrame({'Feature':features,'Importance':FI})\n",
    "print('\\nDisplaying Feature Importance for the best Model:\\n')\n",
    "print(FI_df)\n",
    "predictions = dtc.predict(X_validate)\n",
    "\n",
    "acc = accuracy_score(y_validate, predictions)\n",
    "pre = precision_score(y_validate, predictions)\n",
    "tpr = recall_score(y_validate, predictions)\n",
    "f1 =  f1_score(y_validate,predictions)\n",
    "\n",
    "Matrix = np.empty([1,4])\n",
    "Matrix[0,0] = pre\n",
    "Matrix[0,1] = tpr\n",
    "Matrix[0,2] = f1\n",
    "Matrix[0,3] = acc\n",
    "Index = ['Max_depth_8'];\n",
    "Columns = ['Precision', 'Recall/TPR', 'F1_Score', 'Accuracy']\n",
    "Matrix = pd.DataFrame(Matrix, index = Index, columns = Columns)\n",
    "print(\"\\n\\nA table of metrics calculated for best model\\n\")\n",
    "print(Matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
